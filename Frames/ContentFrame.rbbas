#tag ClassProtected Class ContentFrame	#tag Method, Flags = &h0		Sub addContent(content as drawableContent)		  if content<>nil then contents.append content		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(frameTitle as string, locx as integer, locy as integer)		  title=frametitle		  		  dim dg, dg2 as drawablegroup		  		  addContent(new PlainDrawableString("Some description...","arial",10))		  addContent(new PlainDrawableString("â€¢ Another item!","arial",14))		  addContent(new PlainDrawableString("ALERT!!!","arial",18))		  dg=new DrawableGroup("Dudes in team:", "system", 10)		  dg2=new DrawableGroup("Inner group?", "system", 10)		  dg2.addcontent(new DrawableGroup("even inner?", "system", 10))		  dg.addContent(dg2)		  addContent(dg)		  addContent(new DrawablePicture(hagar,1))		  addContent(new PlainDrawableString("long!long!long!long!long!long!","arial",10))		  		  dg=new drawablegroup("A Group","smallsystem",10)		  dg.addcontent(new DrawableProgress(0.5))		  dg.addContent(new DrawablePicture(hagar,0.5))		  		  addcontent(dg)		  		  addContent(new PlainDrawableString("A ProgressBar anyone?","arial",10))		  addcontent(new DrawableProgress(rnd))		  		  maxButt=new lilactionButton("+")		  minButt=new lilactionButton("-")		  		  width=self.frameTitle.width+30		  height=self.frameTitle.height		  		  x=locx		  y=locy		  		  maxbutt.relx=width-maxbutt.width-3		  maxbutt.rely=(self.frametitle.height+4)/2-maxbutt.height/2+2		  		  minbutt.relx=width-minbutt.width-maxbutt.width-2		  minbutt.rely=(self.frametitle.height+4)/2-minbutt.height/2+2		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function data() As picture		  #pragma disablebackgroundTasks		  		  dim i, sy as integer		  dim dc as drawableContent		  		  if needsUpdate then		    //clear last pict		    lastPict=nil		    		    //create new one		    lastPict=newpicture(width,height,32)		    		    //mask		    lastpict.mask.graphics.foreColor=&cffffff		    lastPict.mask.graphics.fillrect 0,0,width,height		    lastpict.mask.graphics.foreColor=&c111111		    lastPict.mask.graphics.fillroundRect 0,0,width,height,15,15		    lastpict.mask.graphics.fillpolygon(array(0,width-10,height,width,height-10,width,height))		    		    //Draw stuff in it		    		    //title		    lastPict.graphics.foreColor=&c8888ff		    lastPict.graphics.fillrect 0,0,width,frametitle.height+4		    lastpict.graphics.drawpicture frametitle.data, width/2-frameTitle.width/2, 4		    		    maxbutt.relx=width-maxbutt.width-3		    maxbutt.rely=(frametitle.height+4)/2-maxbutt.height/2+2		    		    minbutt.relx=width-minbutt.width-maxbutt.width-2		    minbutt.rely=(frametitle.height+4)/2-minbutt.height/2+2		    		    lastPict.graphics.drawpicture maxbutt.data,maxbutt.relx,maxbutt.rely		    lastPict.graphics.drawpicture minbutt.data,minbutt.relx,minbutt.rely		    'lastPict.graphics.drawline 0,frametitle.height+4,width,frametitle.height+4		    		    //contents		    sy=frametitle.height+4+6		    for i=0 to ubound(contents)		      dc=contents(i)		      if sy<=height then		        if dc isa drawablepicture then		          lastPict.graphics.drawpicture dc.data,width/2-dc.width/2,sy		        else		          lastPict.graphics.drawpicture dc.data,15,sy		        end if		      end if		      sy=sy+dc.height+3		      if sy>height then exit		    next		    		    //frame		    lastPict.graphics.penwidth=2		    lastPict.graphics.penheight=2		    lastPict.graphics.foreColor=&c000000		    lastPict.graphics.drawroundRect 0,0,width,height,15,15		    lastPict.graphics.drawline 0,frametitle.height+4,width,frametitle.height+4		    lastPict.graphics.penwidth=1		    lastPict.graphics.penheight=1		    		    //resizeWidget		    'lastPict.graphics.drawrect width-10,height-10,10,10		    lastPict.graphics.foreColor=&cCCCCCC		    lastpict.graphics.fillpolygon(array(0,width-10,height,width,height-10,width,height))		    lastPict.graphics.foreColor=&c000000		    lastpict.graphics.drawpolygon(array(0,width-11,height-1,width-1,height-11,width-1,height-1))		    		  end if		  		  needsUpdate=false		  return lastPict		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function height() As integer		  return h		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub height(assigns value as integer)		  h=value		  		  if h<2*(frameTitle.height+8) then h=2*(frametitle.height+8)		  if h>maxh then h=maxh		  		  needsUpdate=true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function hit(hx as integer, hy as integer) As boolean		  dim i,maxh as integer		  dim dc as drawablecontent		  		  resizeHit = hx>=(x+w-10) and hy>=(y+h-10)		  		  if minbutt.hit(hx-x,hy-y) then		    height=0		    width=0		    needsUpdate=true		  end if		  if maxbutt.hit(hx-x,hy-y) then		    height=self.maxh		    width=maxw		    needsUpdate=true		  end if		  		  maxh=frametitle.height+4+6		  for i=0 to ubound(contents)		    dc=contents(i)		    if dc isa ClickListener then		      if ClickListener(dc).hit(hx-x-15,hy-y-maxh) then		        needsUpdate=true		      end if		    end if		    maxh=maxh+dc.height+3		    if maxh>height then exit		  next		  		  if needsUpdate then		    width=width		    height=height		  end if		  		  return hx>=x and hx<=x+w and hy>=y and hy<=y+h		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function maxh() As integer		  dim i, maxh as integer		  dim dc as drawableContent		  		  maxh=frametitle.height+4+6		  		  for i=0 to ubound(contents)		    dc=contents(i)		    maxh=maxh+dc.height+3		  next		  		  return maxh+4		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function maxw() As integer		  dim i, maxw as integer		  dim dc as drawableContent		  		  maxw=frametitle.width+50		  		  for i=0 to ubound(contents)		    dc=contents(i)		    if dc.maxW+30>maxw then maxw=dc.maxW+30		  next		  		  return maxw		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub offset(ox as integer, oy as integer)		  if not resizeHit then		    x=x+ox		    y=y+oy		  else 		    width=width+ox		    height=height+oy		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function title() As string		  return frameTitle.text		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub title(assigns value as string)		  if frametitle=nil then 		    frameTitle=new PlainDrawableString(value,"arial",10,true)		  else		    frameTitle.text=value		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function width() As integer		  return w		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub width(assigns value as integer)		  dim i as integer		  dim dc as drawablecontent		  w=value		  		  if w<frameTitle.width+50 then w=frameTitle.width+50		  if w>maxw then w=maxw		  		  for i=0 to ubound(contents)		    dc=contents(i)		    dc.width=w-30		  next		  		  needsUpdate=true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function x() As integer		  return xpos		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub x(assigns value as integer)		  xpos=value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function y() As integer		  return ypos		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub y(assigns value as integer)		  ypos=value		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected contents() As DrawableContent	#tag EndProperty	#tag Property, Flags = &h1		Protected frameTitle As PlainDrawableString	#tag EndProperty	#tag Property, Flags = &h1		Protected h As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lastPict As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected maxButt As lilactionbutton	#tag EndProperty	#tag Property, Flags = &h1		Protected minButt As lilActionButton	#tag EndProperty	#tag Property, Flags = &h1		Protected needsUpdate As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected resizeHit As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected w As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected xpos As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected ypos As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass