#tag ClassProtected Class DrawableGroupImplements DrawableContent, ClickListener	#tag Method, Flags = &h0		Sub addContent(content as drawablecontent)		  if content<>nil then contents.append content		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addString(what as string)		  contents.append new PlainDrawableString(what,"arial",10)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(title as string, theFont as string, size as integer)		  groupName=new PlainDrawableString(title,"arial",12)		  		  addContent new PlainDrawableString("Alex Restrepo","arial",10)		  addContent new PlainDrawableString("Alejandro Montoya","arial",10)		  addContent new PlainDrawableString("Alejandro Betancur","arial",10)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function data() As picture		  #pragma disablebackgroundTasks		  		  dim tmp as picture		  dim i, pts(), sy as integer		  dim dc as drawablecontent		  		  tmp=newpicture(width,height,32)		  		  if isexpanded then		    pts.append 0		    pts.append 0		    pts.append groupName.height/2-3		    pts.append 8		    pts.Append groupName.height/2-3		    pts.append 4		    pts.append groupName.height/2+4		  else		    pts.append 0		    pts.append 0		    pts.append groupName.height/2+4		    pts.append 0		    pts.Append groupName.height/2-4		    pts.append 7		    pts.append groupName.height/2		  end if		  tmp.graphics.fillpolygon(pts)		  tmp.graphics.drawpicture groupName.data,10,0		  		  if isexpanded then		    tmp.graphics.foreColor=&c888888		    'tmp.graphics.drawline 4,groupName.height/2,4,groupName.height+3		    sy=groupName.height+3		    for i=0 to ubound(contents)		      dc=contents(i)		      tmp.graphics.drawpicture dc.data, 13, sy		      		      tmp.graphics.drawline 4,sy+dc.height/2,10,sy+dc.height/2		      sy=sy+dc.height+3		    next		    		    if dc<>nil then tmp.graphics.drawline 3,groupName.height/2,3,sy-dc.height/2-3		  end if		  		  tmp.graphics.foreColor=&c000000		  tmp.graphics.fillpolygon(pts)		  		  'tmp.graphics.drawrect 0,groupName.height/2-6,12,12		  'tmp.graphics.drawrect 0,0,tmp.width,tmp.height		  		  return tmp		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function height() As integer		  dim i,h as integer		  if isexpanded then		    h=groupName.height		    for i=0 to ubound(contents)		      h=h+contents(i).height+3		    next		  else		    h=groupName.height		  end if		  		  return h		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function hit(hx as integer, hy as integer) As boolean		  dim tmp as boolean		  dim i as integer		  dim dc as drawablecontent		  		  tmp=hx>=0 and hx<=12 and hy>=groupName.height/2-6 and hy<=groupName.height/2+6		  if tmp then isexpanded=not isexpanded		  		  for i=0 to ubound(contents)		    dc=contents(i)		    if dc isa clickListener then		      tmp=tmp or clickListener(dc).hit(hx-13,groupname.height/2)		    end if		  next		  		  return tmp		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function maxW() As integer		  return groupName.maxW		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function width() As integer		  dim i,w as integer		  if isexpanded then		    w=groupName.width+13		    for i=0 to ubound(contents)		      if contents(i).width+13> w then w=contents(i).width+13		    next		  else		    w=groupName.width+10		  end if		  		  maxItemW=w		  return w		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub width(assigns value as integer)		  dim i as integer		  dim dc as drawablecontent		  		  groupName.width=value		  for i=0 to ubound(contents)		    dc=contents(i)		    dc.width=value-6		  next		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected contents() As DrawableContent	#tag EndProperty	#tag Property, Flags = &h1		Protected groupName As PlainDrawableString	#tag EndProperty	#tag Property, Flags = &h1		Protected isexpanded As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected maxItemW As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass