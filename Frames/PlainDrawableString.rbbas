#tag ClassProtected Class PlainDrawableStringImplements DrawableContent	#tag Method, Flags = &h0		Sub Constructor(data as string, thefont as string, size as integer)		  constructor(data,thefont,size,false)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(data as string, thefont as string, size as integer, invert as boolean)		  fontname=thefont		  fontsize=size		  		  text=data		  inverted=invert		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function data() As picture		  #pragma disablebackgroundTasks		  		  dim tmp as picture		  tmp=newpicture(width,height,32)		  		  if not inverted then		    tmp.graphics.textsize=fontsize		    tmp.graphics.textfont=fontname		    tmp.graphics.drawstring text,0,h-fontSize\3,width		  else		    tmp.mask.graphics.foreColor=&cffffff		    tmp.mask.graphics.fillrect 0,0,tmp.width,tmp.height		    tmp.mask.graphics.foreColor=&c000000		    tmp.mask.graphics.textsize=fontsize		    tmp.mask.graphics.textfont=fontname		    tmp.mask.graphics.bold=true		    tmp.mask.graphics.drawstring text,0,h-fontSize\3,width		  end if		  'tmp.graphics.drawrect 0,0,width,height		  return tmp		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function height() As integer		  return stringheight(txt,width)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function maxW() As integer		  return stringwidth(txt)		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function stringHeight(data as string, wrap as integer) As integer		  dim tmp as picture		  dim theh as integer		  		  tmp=newpicture(2,2,8)		  tmp.graphics.textsize=fontsize		  tmp.graphics.textfont=fontName		  if inverted then tmp.graphics.bold=true		  		  theh=tmp.graphics.stringheight(data,wrap)		  return theh		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function stringWidth(data as string) As integer		  dim tmp as picture		  dim thew as integer		  		  tmp=newpicture(2,2,8)		  tmp.graphics.textsize=fontsize		  tmp.graphics.textfont=fontName		  if inverted then tmp.graphics.bold=true		  		  thew=tmp.graphics.stringWidth(data)		  return thew+4		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function text() As string		  return txt		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub text(assigns value as string)		  txt=value		  		  w=stringwidth(txt)		  h=stringheight(txt,w+4)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function width() As integer		  return w+4		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub width(assigns value as integer)		  w=value		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected fontName As string	#tag EndProperty	#tag Property, Flags = &h1		Protected fontSize As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected h As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected inverted As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected txt As string	#tag EndProperty	#tag Property, Flags = &h1		Protected w As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass